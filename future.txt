enum ServiceLifetime {
    Singleton
    Scoped
    Transient
}

class ServiceFactory {
    Type Type
    Value Value
    int DepsCount
    Type ReturnType
    boolean HasErr
}

class ServiceDescriptor {
    Type Type
    string Key
    Type Implementation
    Value? Instance
    ServiceFactory? Factory
    ServiceLifetime Lifetime
}

class ServiceCollection {
    ServiceDescriptor[] Descriptors
}



struct ServiceIdentifier {
    Type Type
    string Key
}

interface IServiceAccessor {
    GetInstance() Value
}

class ServiceProvider {
    ServiceScope RootScope
    Map[ServiceIdentifier, ServiceAccessor] ServiceAccessors

    GetService[T]() => GetScopedService[T](this.RootScope)
    GetScopedService[T](ServiceScope scope) {

    }
}

class ServiceScope {
    # If true saves instances of Singleton services
    boolean IsRoot
    ServiceProvider RootProvider

    RwMutex DescriptorsMX
    Map[ServiceIdentifier, SinglyLinkedList[ServiceDescriptor]] Descriptors
}





func AddScoped[T](func factory) {}
func AddKeyedScoped[T](key string, func factory) {}
func AddTransient[T](func factory) {}
func AddKeyedTransient[T](key string, func factory) {}
func AddSingleton[T](func | any factoryOrValue) {}
func AddKeyedSingleton[T](key string, func | any factoryOrValue) {}


var defaultServiceProvider ServiceProvider

func Build() {
    defaultServiceProvider = new ServiceProvider(serviceCollection)
}

func GetService[T]() (T, boolean) {}
func GetKeyedService[T](key string) (T, boolean) {}
func GetRequiredService[T]() T {}
func GetKeyedRequiredService[T](key string) T {}

func GetScopedService[T](Scope scope) (T, boolean) {}
func GetKeyedScopedService[T](key string, Scope scope) (T, boolean) {}
func GetRequiredScopedService[T](Scope scope) T {}
func GetKeyedRequiredScopedService[T](key string, Scope scope) T {}









### ROUTING
class Context {}

struct EndpointIdentifier {
    Method Method
    string Path
}

class Endpoint {
    EndpointIdentifier ID
    func (controller c, Context c) Handler
    Type ControllerType
}

class EndpointsTree extends Tree {
    Find(string method, string path) Endpoint
}

class EndpointsCollection {
    EndpointsTree Endpoints

    func Handle(string path) {
        var e = Endpoints.Find(path)
        var c, _ = di.GetServiceType(e.ControllerType)
        e.Handler(c, CreateContext())
    }
}

interface IControllerBuilder[T] {
    GET(string path, func(T controller, Context c), MiddlewareFunc... middlewares) IControllerBuilder[T]
    POST(string path, func(T controller, Context c), MiddlewareFunc... middlewares) IControllerBuilder[T]
    PUT(string path, func(T controller, Context c), MiddlewareFunc... middlewares) IControllerBuilder[T]
    PATCH(string path, func(T controller, Context c), MiddlewareFunc... middlewares) IControllerBuilder[T]
    DELETE(string path, func(T controller, Context c), MiddlewareFunc... middlewares) IControllerBuilder[T]
}

MapController[T](factory, MiddlewareFunc... middlewares) IControllerBuilder[T] {
    validateFactory(factory)
    AddTransient[T](factory)

    return new ControllerBuilder[T]()
}

class ControllerBuilder[T] implements IControllerBuilder[T] {


    POST(path, func, middlewares) {
        asd

        return this
    }
}







